
function word printString(adress string)
for a=0;string[a]>'\0';a++
{
	putc string[a]
}
//return ammount of bytes sent to stdout
return a
//prints null terminated char array to stdout

function word strlen(adress string)
for a=0;string[a]>'\0';a++
{
}
return a
//returns total string lenght in bytes

function adress strchr(adress string,word char)
for a=0;string[a]>'\0';a++
{
	if string[a]==char
	{
		return string+a
		//return pointer to first occurance of char
	}
}
return 0
//function returns pointer to first occurance of char in string

function adress strstr(adress haystack,adress needle)
	let size = CALL strlen{needle}
	let offset = 0
	for a=0;haystack[a+size]>'\0';a++
	{
		let equal=1
		//put equal
		for b=0;needle[b]>'\0';b++
		{
			if haystack[a+b]!=needle[b]
			{
				let equal=0
				//add break here
			}
		}
		if equal==1
		{
			return haystack+a
			//add break here
		}
	}
	return 0
//function search for first occurance of needle in haystack and returns pointer to it

function word strcpy(adress dest,adress source)
	for a=0;source[a]>'\0';a++
	{
		let dest[a]=source[a]
	}
	let dest[a++]='\0'
	return a
//coppies char array source to the dest
//returns ammount of bytes coppied

function adress strtok(adress string,word char,adress buf)
	let buffer=@buf
	let token=0
	if buffer[0]==0
	{
		let t = CALL strcpy{buffer,string}
	}
	let ch=CALL strchr{buffer,char}
	if ch!=0
	{
		let token=buffer
		let @ch='\0'
		let @buf=ch+1
	}
	else if buffer[0]!=-1
	{
		let token=buffer
		let @(buffer-1)=-1
		let @buf=buffer-1
	}
	return token
//string is immutable, char is imutable
//pointer to buffer is mutable so best to preserve its state
//function returns pointer to first token or to original string if char sep not found
