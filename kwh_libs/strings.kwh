
function word printString(adress string)
for a=0;string[a]>'\0';a++
{
	putc string[a]
}
//return ammount of bytes sent to stdout
return a
//prints null terminated char array to stdout

function word strlen(adress string)
for a=0;string[a]>'\0';a++
{

}
return a
//returns total string lenght in bytes

function adress strchr(adress string,word char)
for a=0;string[a]>'\0';a++
{
	if string[a]==char
	{
		return string+a
		//return pointer to first occurance of char
	}
}
return 0{a}
//function returns pointer to first occurance of char in string

function adress strstr(adress haystack,adress needle)
	let size = CALL strlen{needle}
	let offset = 0
	for a=0;haystack[a+size]>'\0';a++
	{
		let equal=1
		//put equal
		for b=0;needle[b]>'\0';b++
		{
			if haystack[a+b]!=needle[b]
			{
				let equal=0
				//add break here
			}
		}
		if equal==1
		{
			return haystack+a
			//add break here
		}
	}
	return 0{a}
//function search for first occurance of needle in haystack and returns pointer to it

function word strcpy(adress dest,adress source)
	for a=0;source[a]>'\0';a++
	{
		let dest[a]=source[a]
	}
	let dest[a++]='\0'
	return a
//coppies char array source to the dest
//returns ammount of bytes coppied

function adress strtok(adress string,word char,adress buf)
	let adress buffer=(@buf){a}
	let adress token=0{a}
	if buffer[0]==0
	{
		let t = CALL strcpy{buffer,string}
	}
	let adress ch=CALL strchr{buffer,char}
	if ch!=0
	{
		let token=buffer
		let @ch='\0'
		let @buf=ch+1
	}
	else if buffer[0]!=-1
	{
		let token=buffer
		let @(buffer-1)=-1
		let @buf=buffer-1
	}
	return token
//string is immutable, char is imutable
//pointer to buffer is mutable so best to preserve its state
//function returns pointer to first token or to original string if char sep not found
//@string is a pointer to null terminated string @char is char delim, 
//@buf is a double pointer to allocated memory
//when no more substrings found -1 returned as first element

function adress concat(adress original,adress append)
	let size = CALL strlen{original}
	let adress origEnd = original+size
	for x=0;append[x]>'\0';x++
	{
		let origEnd[x]=append[x]
	}
	let origEnd[x]=append[x]
	return origEnd
	
function word strcmp(adress left,adress right)
	let word flag = 0
	for i=0;(left[i]>'\0')*(right[i]>'\0');i++
	{
		if left[i]!=right[i]
		{
			//flag shows amount of bits diff
			let flag=flag+1
		}
	}

	//check if one string is trimmed version of second
	// 1337228 is special flag for trimmed strings
	if (flag==0)*(right[i]!='\0'+left[i]!='\0')
	{
		let flag = 1337228
	}

	//means that size (left) < size(right)

	if right[i]!='\0'
	{
		let flag = flag *-1
	}

	return flag

function word memset(adress string,word size,word s)
for a=0;a<size;a++
{
	let string[a]=s
}
//return ammount of bytes sent to stdout
return a

function word FlushBuffer(adress buf)
	KASM{
		LOAD %buf
		SYSCALL 101
	}
	return 0
//@param buf adress of buffer to be printed
//WARNING function DOES NOT accept string litterals !!!!

function word AppendBuffer(adress buffer,adress counter,adress values)
	let buffer[@counter] = (values[7]<<56) || (values[6]<<48) || (values[5]<<40) || (values[4]<<32) || (values[3]<<24) || (values[2]<<16) || (values[1]<<8) || values[0]
	let @counter=@counter+1
	return 0

function word Flush()
KASM{
		SYSCALL 102
	}
return 0	

